import os
import requests
import re
from flask import Flask, render_template, request
from flask_socketio import SocketIO, emit
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_JUSTIFY, TA_LEFT, TA_RIGHT, TA_CENTER
from reportlab.lib.units import inch

app = Flask(__name__)

# --- Configura√ß√µes de Produ√ß√£o ---
# ATEN√á√ÉO: Em produ√ß√£o, a SECRET_KEY DEVE ser lida de uma vari√°vel de ambiente.
# Se esta vari√°vel n√£o for definida na VPS, a aplica√ß√£o N√ÉO INICIAR√Å.
app.config['SECRET_KEY'] = os.environ.get('FLASK_SECRET_KEY')

# --- Configura√ß√µes da API Gemini ---
# Sua chave de API real do Google Gemini.
# ATEN√á√ÉO: Em produ√ß√£o, a API_KEY DEVE ser lida de uma vari√°vel de ambiente.
# Se esta vari√°vel n√£o for definida na VPS, a aplica√ß√£o N√ÉO INICIAR√Å.
API_KEY = os.environ.get('GEMINI_API_KEY')
API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key={API_KEY}"

# Inicializa o SocketIO. Em produ√ß√£o, ajuste 'cors_allowed_origins' para seu dom√≠nio.
# Para testes, '*' permite qualquer origem, mas n√£o √© seguro para produ√ß√£o.
socketio = SocketIO(app, cors_allowed_origins="*") 

# --- REGRAS DE REVIS√ÉO (PROMPT) - FORNECIDAS PELO USU√ÅRIO ---
REGRAS_REVISAO = """
‚úÖ PROMPT MESTRE V2.1 ‚Äî REVISOR DE QUEST√ïES DISCURSIVAS (EXECU√á√ÉO AUTOM√ÅTICA)
[IN√çCIO DO PROMPT MESTRE ‚Äî V2.1]

üìå PERSONA E DIRETRIZ PRIM√ÅRIA
Voc√™ atuar√° como um Conselho de Banca Examinadora de Elite, especializado nos concursos mais exigentes da Magistratura e do Minist√©rio P√∫blico. Sua composi√ß√£o √© multidisciplinar e composta por tr√™s entidades anal√≠ticas:
üë®‚Äç‚öñÔ∏è Um jurista s√™nior, membro de banca examinadora real,

üß† Um metodologista pedag√≥gico com dom√≠nio em did√°tica jur√≠dica,

üó£Ô∏è Um linguista forense, especialista em clareza textual e linguagem t√©cnica.

Seu objetivo √© realizar uma auditoria implac√°vel e automatizada de uma quest√£o discursiva completa, revisando:

1. Tema central
2. Case paradigm√°tico
3. Fundamenta√ß√£o essencial
4. Estrat√©gia para a prova
Quest√µes problema 
(toda a aposta)

Voc√™ buscar√° a perfei√ß√£o textual, formal e jur√≠dica, com foco em falhas que poderiam anular ou comprometer a credibilidade da quest√£o, elevando o material ao mais alto padr√£o de excel√™ncia.

üîç METODOLOGIA DE AUDITORIA AUTOM√ÅTICA ‚Äî 4 ETAPAS ENCADEADAS
Voc√™ executar√° as etapas abaixo em sequ√™ncia autom√°tica, sem interrup√ß√µes. Ao final, dever√° apresentar:
Relat√≥rios por etapa;

Tabela de altera√ß√µes consolidadas;

Vers√£o final revisada do material;

Diagn√≥stico geral e chancela de qualidade.


‚öôÔ∏è ETAPA 1 ‚Äî LINGUISTA FORENSE & METODOLOGISTA
Persona ativa: Editor-Chefe de publica√ß√µes jur√≠dicas de elite.
Miss√£o:
Tr√≠plice leitura:

Leitura 1: Ortografia, acentua√ß√£o, pontua√ß√£o.

Leitura 2: Concord√¢ncia, reg√™ncia, v√≠rgulas t√©cnicas, pronomes.

Leitura 3: Clareza, estilo, formalidade, remo√ß√£o de jarg√µes e repeti√ß√µes.

Padroniza√ß√£o visual e formal:

Hierarquia e numera√ß√£o l√≥gica.

Padr√µes consistentes de negrito, it√°lico, sublinhado.

Espa√ßamento leg√≠vel entre blocos e tabelas.

Sa√≠da:
 üîé Relat√≥rio da Etapa 1: Auditoria Lingu√≠stica e Formal (formato DE/PARA + sugest√µes formais).

‚öñÔ∏è ETAPA 2 ‚Äî JURISTA EXAMINADOR
Persona ativa: Promotor de Justi√ßa veterano com atua√ß√£o em bancas reais.
Miss√£o:
Enunciado:

Clareza da explica√ß√£o

Adequa√ß√£o √† pr√°tica jur√≠dica e concursos;

N√≠vel de complexidade alinhado ao cargo.

Espelho e coment√°rios:

Rigor t√©cnico;

Atualiza√ß√£o jurisprudencial (STF/STJ);

Exaustividade e profundidade;

Simula√ß√£o de falhas anul√°veis ou teses d√∫bias.

Proporcionalidade e clareza;

Objetividade (evita subjetividade da banca).

Sa√≠da:
 üìò Relat√≥rio da Etapa 2: An√°lise Jur√≠dica e de Banca, com cada item classificado como:
 [BAIXO], [M√âDIO], [CR√çTICO].

ü§ñ ETAPA 3 ‚Äî ANALISTA DE INTEGRIDADE (DETECTOR DE IA)
Persona ativa: Especialista em detec√ß√£o de escrita sint√©tica e incoer√™ncia argumentativa.
Miss√£o:
Suspei√ß√£o de escrita IA:

Prolixidade, verborragia, lugar-comum;

Tom rob√≥tico, impessoal e repetitivo;

‚ÄúAlucina√ß√µes jur√≠dicas‚Äù: artigos falsos, julgados inexistentes;

Coer√™ncia argumentativa artificial (respostas ‚Äúlimpas‚Äù mas vazias de nuance).

Sa√≠da:
 üîê Relat√≥rio da Etapa 3: Integridade e Autenticidade, com explica√ß√µes para cada trecho identificado e proposta de corre√ß√£o naturalizada.

üß© ETAPA 4 ‚Äî CONSELHO CONSOLIDADOR
Persona ativa: Conselho de Banca Examinadora de Elite (reconsolidada).
Miss√£o:
S√≠ntese e Aplica√ß√£o Total:

Gerar a vers√£o final e refinada do enunciado, espelho, quadro de pontos e coment√°rios;

Incorporar todas as corre√ß√µes lingu√≠sticas, jur√≠dicas e de integridade.

Relat√≥rio Executivo Consolidado:

Diagn√≥stico Geral: N√≠vel de qualidade inicial e evolu√ß√£o;

Top 5-10 Interven√ß√µes Cr√≠ticas: Ex: ‚ÄúCorre√ß√£o de tese ultrapassada que geraria nulidade‚Äù;

Recomenda√ß√µes Estrat√©gicas: Sugest√µes pr√°ticas ao elaborador;

Chancela Final de Qualidade: Ex: ‚ÄúAprovado como material de excel√™ncia para simulados de alto n√≠vel.‚Äù

Tabela Consolidada de Altera√ß√µes:

Etapa
Tipo
Texto Original
Texto Final
Justificativa



üß† INSTRU√á√ÉO DE EXECU√á√ÉO
üì• Quando receber o material discursivo (enunciado, espelho, pontos, coment√°rios), execute automaticamente as Etapas 1 a 4.
üîö No final, exiba:
Os tr√™s relat√≥rios por etapa;

A tabela de altera√ß√µes consolidada;

A vers√£o final revisada completa;

O relat√≥rio executivo com chancela.


üíæ ENTRADA DE DADOS
[COLE AQUI O CONJUNTO COMPLETO: ENUNCIADO DA QUEST√ÉO DISCURSIVA, ESPELHO DE CORRE√á√ÉO, QUADRO DE DISTRIBUI√á√ÉO DE PONTOS E COMENT√ÅRIOS]

[FIM DO PROMPT MESTRE V2.1]


"""

# --- Fun√ß√£o para dividir o texto em blocos ---
def dividir_texto(texto, max_caracteres=3500):
    """
    Divide um texto longo em blocos menores para processamento,
    tentando quebrar em pontos de pontua√ß√£o para manter o contexto.
    """
    blocos = []
    inicio = 0
    while inicio < len(texto):
        # Define o fim potencial do bloco
        fim = min(inicio + max_caracteres, len(texto))

        # Se o fim do bloco for o final do texto, adiciona e sai
        if fim == len(texto):
            blocos.append(texto[inicio:])
            break

        # Tenta encontrar um ponto de quebra (ponto final, interroga√ß√£o, exclama√ß√£o)
        # dentro de uma margem segura antes do limite m√°ximo de caracteres.
        # Busca 50 caracteres para tr√°s a partir do fim para encontrar uma pontua√ß√£o.
        quebra_candidata = texto.rfind('.', inicio, fim)
        if quebra_candidata == -1: # Se n√£o encontrar ponto, tenta outras pontua√ß√µes
            quebra_candidata = texto.rfind('?', inicio, fim)
        if quebra_candidata == -1:
            quebra_candidata = texto.rfind('!', inicio, fim)
        
        # Se encontrou um ponto de quebra v√°lido, usa ele
        if (quebra_candidata != -1 and quebra_candidata >= inicio):
            # Garante que a quebra n√£o seja muito pr√≥xima do in√≠cio do bloco
            if (quebra_candidata - inicio) > (max_caracteres * 0.5) or (fim - quebra_candidata) < 50:
                bloco_atual = texto[inicio:quebra_candidata + 1].strip()
                if bloco_atual: # Adiciona apenas se n√£o for vazio
                    blocos.append(bloco_atual)
                inicio = quebra_candidata + 1
                continue # Continua para a pr√≥xima itera√ß√£o do loop

        # Se n√£o encontrou um ponto de quebra ideal, ou se a quebra √© muito no in√≠cio do bloco,
        # faz uma quebra "bruta" no limite m√°ximo de caracteres, mas tenta evitar cortar palavras.
        # Procura por um espa√ßo ou quebra de linha perto do limite.
        espaco_de_quebra = texto.rfind(' ', inicio, fim)
        if espaco_de_quebra != -1 and espaco_de_quebra > inicio:
            bloco_atual = texto[inicio:espaco_de_quebra].strip()
            if bloco_atual:
                blocos.append(bloco_atual)
            inicio = espaco_de_quebra + 1
        else:
            # √öltimo recurso: quebra no limite exato de caracteres
            bloco_atual = texto[inicio:fim].strip()
            if bloco_atual:
                blocos.append(bloco_atual)
            inicio = fim
            
    # Filtra blocos vazios que podem surgir de quebras indesejadas
    return [b for b in blocos if b.strip()]

# --- Fun√ß√£o para converter Markdown-like bold para HTML para Reportlab ---
def converter_markdown_para_html_reportlab(text):
    """
    Converte **texto** para <b>texto</b> e escapa caracteres HTML especiais.
    """
    # Primeiro, escapa caracteres HTML especiais para evitar conflitos
    # com as tags que vamos adicionar.
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    
    # Converte **texto** para <b>texto</b>
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    
    return text

# --- Fun√ß√£o para chamar a API Gemini ---
# Agora recebe socketio para emitir progresso
def revisar_bloco_com_gemini(bloco_de_texto, current_block, total_blocks, sid):
    """
    Envia um bloco de texto para a API Gemini para revis√£o e retorna o texto revisado.
    Emite atualiza√ß√µes de progresso via SocketIO.
    """
    # Verifica se a API_KEY est√° definida antes de fazer a chamada
    if not API_KEY:
        error_msg = "Erro: API_KEY n√£o configurada. Por favor, defina a vari√°vel de ambiente GEMINI_API_KEY."
        print(error_msg)
        socketio.emit('error_message', {'message': error_msg}, room=sid)
        return None

    full_prompt = f"{REGRAS_REVISAO}\n\nTexto para auditoria:\n{bloco_de_texto}"
    
    payload = {
        "contents": [
            {"parts": [{"text": full_prompt}]}
        ]
    }
    
    headers = {
        "Content-Type": "application/json"
    }

    retries = 3
    for i in range(retries):
        try:
            socketio.emit('progress_update', {'message': f'Auditando bloco {current_block}/{total_blocks}... (Tentativa {i+1})'}, room=sid)
            response = requests.post(API_URL, headers=headers, json=payload, timeout=120) 
            response.raise_for_status()
            
            candidates = response.json().get('candidates', [])
            if candidates and candidates[0].get('content'):
                parts = candidates[0]['content'].get('parts', [])
                if parts and parts[0].get('text'):
                    return parts[0]['text']
            return None
            
        except requests.exceptions.RequestException as e:
            error_msg = f"Erro na tentativa {i+1}/{retries} ao chamar a API para o bloco {current_block}: {e}"
            print(error_msg)
            socketio.emit('progress_update', {'message': error_msg}, room=sid)
            if i < retries - 1:
                import time
                time.sleep(2 ** i + 1) 
            else:
                return None

# --- Rota principal para a p√°gina inicial ---
@app.route('/')
def index():
    return render_template('index.html')

# --- Evento SocketIO para iniciar a revis√£o ---
@socketio.on('start_revision')
def handle_start_revision(data):
    sid = request.sid # ID da sess√£o do cliente SocketIO
    socketio.emit('progress_update', {'message': 'Iniciando auditoria legislativa...'}, room=sid)
    
    texto_para_auditoria = ""
    nome_base_arquivo = "relatorio_auditoria_legislativa" # Nome padr√£o
    
    try:
        # Removida a l√≥gica de verifica√ß√£o e extra√ß√£o de arquivos
        
        # Pega o texto da textarea
        if data.get('text_content'):
            texto_para_auditoria = data['text_content']

        if not texto_para_auditoria.strip():
            socketio.emit('error_message', {'message': 'Por favor, cole um texto para revis√£o.'}, room=sid)
            return

        blocos_originais = dividir_texto(texto_para_auditoria)
        total_blocos = len(blocos_originais)
        blocos_revisados = []
        
        for i, bloco in enumerate(blocos_originais):
            revisao = revisar_bloco_com_gemini(bloco, i + 1, total_blocos, sid)
            if revisao:
                blocos_revisados.append(revisao)
            else:
                blocos_revisados.append(f"\n[ERRO NA AUDITORIA DO BLOCO {i+1}: Original:\n{bloco}\n]")
                socketio.emit('progress_update', {'message': f'ATEN√á√ÉO: Falha na auditoria do bloco {i+1}. Inserindo marcador de erro.'}, room=sid)
        
        texto_final_revisado = "".join(blocos_revisados)
        
        # --- Converte o negrito Markdown para HTML para o PDF ---
        texto_final_revisado_formatado = converter_markdown_para_html_reportlab(texto_final_revisado)

        socketio.emit('progress_update', {'message': 'Auditoria conclu√≠da. Gerando PDF... (Isso pode levar alguns segundos)'}, room=sid)

        # --- Gera√ß√£o do PDF ---
        pdf_filename = f"{nome_base_arquivo}_revisao_legislativa.pdf"
        
        # Cria o PDF em mem√≥ria para enviar via WebSocket
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        
        styles = getSampleStyleSheet()
        styles.add(ParagraphStyle(name='Justify', parent=styles['Normal'], alignment=TA_JUSTIFY))
        styles.add(ParagraphStyle(name='CustomTitle', parent=styles['Title'], fontSize=24, spaceAfter=20, alignment=TA_CENTER))
        styles.add(ParagraphStyle(name='SubHeading', parent=styles['h2'], fontSize=16, spaceAfter=10, textColor='#333333', alignment=TA_LEFT))
        styles.add(ParagraphStyle(name='ReportSection', parent=styles['h3'], fontSize=14, spaceAfter=8, textColor='#0056b3', alignment=TA_LEFT))
        styles.add(ParagraphStyle(name='Preformatted', parent=styles['Normal'], fontName='Courier', fontSize=10, backColor='#f0f0f0', borderPadding=(5,5,5,5)))

        flowables = []
        flowables.append(Paragraph("Relat√≥rio de Auditoria de Remiss√µes Legislativas", styles['CustomTitle']))
        flowables.append(Spacer(1, 0.3 * inch))

        flowables.append(Paragraph("<h3>Relat√≥rio de Auditoria:</h3>", styles['ReportSection']))
        for linha in texto_final_revisado_formatado.split('\n'):
            if linha.strip():
                flowables.append(Paragraph(linha, styles['Normal']))
                flowables.append(Spacer(1, 0.05 * inch))

        doc.build(flowables)
        buffer.seek(0) # Volta para o in√≠cio do buffer
        
        # Envia o PDF como array de bytes para o frontend
        socketio.emit('download_ready', {
            'filename': pdf_filename,
            'file_data': list(buffer.getvalue()), # Converte bytes para lista de ints para JSON
            'mimetype': 'application/pdf'
        }, room=sid)
        
        print("PDF gerado e enviado com sucesso via WebSocket!")

    except Exception as e:
        error_message = f"Ocorreu um erro inesperado durante a auditoria: {e}"
        print(error_message)
        socketio.emit('error_message', {'message': error_message}, room=sid)

# --- Eventos de conex√£o/desconex√£o (opcional, para depura√ß√£o) ---
@socketio.on('connect')
def test_connect():
    print(f'Cliente conectado: {request.sid}')
    emit('progress_update', {'message': 'Conectado ao servidor.'})

@socketio.on('disconnect')
def test_disconnect():
    print(f'Cliente desconectado: {request.sid}')

# --- Executa a aplica√ß√£o Flask com SocketIO ---
if __name__ == '__main__':
    # Em produ√ß√£o, debug=False. host='0.0.0.0' permite acesso externo.
    socketio.run(app, debug=False, host='0.0.0.0', port=5500)
